// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/service.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransfersRequest struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	State                string   `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransfersRequest) Reset()         { *m = TransfersRequest{} }
func (m *TransfersRequest) String() string { return proto.CompactTextString(m) }
func (*TransfersRequest) ProtoMessage()    {}
func (*TransfersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe50f8fb92b2bd74, []int{0}
}
func (m *TransfersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransfersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransfersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransfersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransfersRequest.Merge(m, src)
}
func (m *TransfersRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransfersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransfersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransfersRequest proto.InternalMessageInfo

func (m *TransfersRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TransfersRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TransfersRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *TransfersRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (*TransfersRequest) XXX_MessageName() string {
	return "types.TransfersRequest"
}

type TransfersResponse struct {
	Transfers            []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TransfersResponse) Reset()         { *m = TransfersResponse{} }
func (m *TransfersResponse) String() string { return proto.CompactTextString(m) }
func (*TransfersResponse) ProtoMessage()    {}
func (*TransfersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe50f8fb92b2bd74, []int{1}
}
func (m *TransfersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransfersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransfersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransfersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransfersResponse.Merge(m, src)
}
func (m *TransfersResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransfersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransfersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransfersResponse proto.InternalMessageInfo

func (m *TransfersResponse) GetTransfers() []*Transfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (*TransfersResponse) XXX_MessageName() string {
	return "types.TransfersResponse"
}
func init() {
	proto.RegisterType((*TransfersRequest)(nil), "types.TransfersRequest")
	golang_proto.RegisterType((*TransfersRequest)(nil), "types.TransfersRequest")
	proto.RegisterType((*TransfersResponse)(nil), "types.TransfersResponse")
	golang_proto.RegisterType((*TransfersResponse)(nil), "types.TransfersResponse")
}

func init() { proto.RegisterFile("types/service.proto", fileDescriptor_fe50f8fb92b2bd74) }
func init() { golang_proto.RegisterFile("types/service.proto", fileDescriptor_fe50f8fb92b2bd74) }

var fileDescriptor_fe50f8fb92b2bd74 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe5, 0x66, 0x9d, 0x34, 0x83, 0xc4, 0xea, 0x22, 0x08, 0xd5, 0x08, 0x56, 0x25, 0xa0,
	0x42, 0x6b, 0x92, 0x95, 0x71, 0xe1, 0xb6, 0x5e, 0x10, 0x37, 0x14, 0x76, 0x83, 0x8b, 0x93, 0xbc,
	0x18, 0x4f, 0x99, 0xed, 0xc5, 0x4e, 0x51, 0xaf, 0x7c, 0x84, 0xf1, 0x85, 0x38, 0xee, 0x88, 0xc4,
	0x17, 0x40, 0x1d, 0x9f, 0x82, 0x13, 0x8a, 0xd3, 0x96, 0x68, 0xbd, 0x24, 0x7e, 0xff, 0xf7, 0x7b,
	0xef, 0xff, 0xfc, 0x12, 0x3c, 0xb4, 0x4b, 0x0d, 0x26, 0x32, 0x50, 0x2d, 0x44, 0x06, 0xa1, 0xae,
	0x94, 0x55, 0xa4, 0xef, 0xc4, 0xd1, 0x94, 0x0b, 0xfb, 0xa5, 0x4e, 0xc3, 0x4c, 0x5d, 0x46, 0x5c,
	0x71, 0x15, 0xb9, 0x6c, 0x5a, 0x17, 0x2e, 0x72, 0x81, 0x3b, 0xb5, 0x55, 0xa3, 0x23, 0xae, 0x14,
	0x2f, 0x21, 0x62, 0x5a, 0x44, 0x4c, 0x4a, 0x65, 0x99, 0x15, 0x4a, 0x9a, 0x75, 0x76, 0xd0, 0x1a,
	0xb9, 0xe7, 0x5a, 0x3a, 0x76, 0xaf, 0x6c, 0xca, 0x41, 0x4e, 0xcd, 0x57, 0xc6, 0x39, 0x54, 0x91,
	0xd2, 0xae, 0x68, 0xb7, 0xc1, 0xf8, 0x02, 0x1f, 0x9e, 0x57, 0x4c, 0x9a, 0x02, 0x2a, 0x93, 0xc0,
	0x55, 0x0d, 0xc6, 0x92, 0x87, 0xb8, 0x5f, 0x8a, 0x4b, 0x61, 0x7d, 0x44, 0xd1, 0xc4, 0x4b, 0xda,
	0x80, 0x3c, 0xc2, 0xfb, 0xaa, 0x28, 0x0c, 0x58, 0xbf, 0xe7, 0xe4, 0x75, 0xd4, 0xd0, 0xc6, 0x32,
	0x0b, 0xbe, 0x47, 0xd1, 0xe4, 0x20, 0x69, 0x03, 0x42, 0xf0, 0x5e, 0x33, 0x94, 0xbf, 0xe7, 0x44,
	0x77, 0x1e, 0xcf, 0xf1, 0xa0, 0xe3, 0x65, 0xb4, 0x92, 0x06, 0xc8, 0x14, 0x1f, 0xd8, 0x8d, 0xe8,
	0x23, 0xea, 0x4d, 0xee, 0xcd, 0x1e, 0x84, 0xed, 0x7d, 0x36, 0x70, 0xf2, 0x9f, 0x98, 0xe9, 0xce,
	0xbc, 0x1f, 0xdb, 0xf5, 0x92, 0xcf, 0xf8, 0xfe, 0x3b, 0xb0, 0x5b, 0x99, 0x3c, 0xbe, 0x53, 0xbf,
	0xb9, 0xd8, 0xc8, 0xdf, 0x4d, 0xb4, 0x53, 0x8c, 0x9f, 0x7c, 0xfb, 0xf5, 0xe7, 0x7b, 0x6f, 0x48,
	0x06, 0x6e, 0xcf, 0x8b, 0x93, 0x68, 0xeb, 0x38, 0xbf, 0xee, 0x5d, 0x9f, 0xfd, 0x45, 0xe4, 0x08,
	0x0f, 0xe7, 0x95, 0xc8, 0x39, 0x50, 0x0b, 0xc6, 0x52, 0xa6, 0x35, 0x3d, 0xfb, 0xf0, 0x7e, 0xd6,
	0x8f, 0xc3, 0x38, 0x3c, 0x79, 0x85, 0x7a, 0xb3, 0x43, 0xa6, 0x75, 0x29, 0x32, 0xb7, 0xdd, 0xe8,
	0xc2, 0x28, 0xf9, 0x76, 0x47, 0x49, 0x5e, 0x60, 0xef, 0x34, 0x8e, 0xc9, 0x33, 0xfc, 0x34, 0x01,
	0x5b, 0x57, 0x12, 0x72, 0x2a, 0x0a, 0x7a, 0x55, 0x43, 0xb5, 0xa4, 0xc2, 0x50, 0x21, 0x17, 0xac,
	0x14, 0x79, 0x98, 0x84, 0x0d, 0x77, 0x4a, 0x5e, 0xe2, 0xe7, 0x5d, 0xce, 0xcd, 0xc4, 0xb2, 0xa6,
	0x5d, 0x43, 0x4b, 0x65, 0x69, 0xa1, 0x6a, 0x99, 0x87, 0xc9, 0x27, 0xec, 0xbd, 0x89, 0x63, 0x72,
	0x8e, 0x93, 0x2e, 0xdf, 0xb1, 0x6f, 0xbb, 0x6f, 0x0c, 0xa8, 0xfb, 0x46, 0xc7, 0xd4, 0x2e, 0xb5,
	0xc8, 0x58, 0x59, 0x2e, 0x1b, 0x3a, 0x67, 0x96, 0xa5, 0xcc, 0x40, 0x83, 0xd6, 0x92, 0x2d, 0x98,
	0x28, 0x59, 0x5a, 0x42, 0x78, 0xb3, 0x0a, 0xd0, 0xcf, 0x55, 0x80, 0x7e, 0xaf, 0x02, 0xf4, 0xe3,
	0x36, 0x40, 0x37, 0xb7, 0x01, 0x4a, 0xf7, 0xdd, 0xdf, 0xf3, 0xfa, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6c, 0xca, 0x70, 0x74, 0xe9, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransfersServiceClient is the client API for TransfersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransfersServiceClient interface {
	GetTransfers(ctx context.Context, in *TransfersRequest, opts ...grpc.CallOption) (*TransfersResponse, error)
}

type transfersServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransfersServiceClient(cc *grpc.ClientConn) TransfersServiceClient {
	return &transfersServiceClient{cc}
}

func (c *transfersServiceClient) GetTransfers(ctx context.Context, in *TransfersRequest, opts ...grpc.CallOption) (*TransfersResponse, error) {
	out := new(TransfersResponse)
	err := c.cc.Invoke(ctx, "/types.TransfersService/GetTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransfersServiceServer is the server API for TransfersService service.
type TransfersServiceServer interface {
	GetTransfers(context.Context, *TransfersRequest) (*TransfersResponse, error)
}

// UnimplementedTransfersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransfersServiceServer struct {
}

func (*UnimplementedTransfersServiceServer) GetTransfers(ctx context.Context, req *TransfersRequest) (*TransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfers not implemented")
}

func RegisterTransfersServiceServer(s *grpc.Server, srv TransfersServiceServer) {
	s.RegisterService(&_TransfersService_serviceDesc, srv)
}

func _TransfersService_GetTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransfersServiceServer).GetTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.TransfersService/GetTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransfersServiceServer).GetTransfers(ctx, req.(*TransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransfersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.TransfersService",
	HandlerType: (*TransfersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransfers",
			Handler:    _TransfersService_GetTransfers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/service.proto",
}

func (m *TransfersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransfersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransfersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintService(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransfersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransfersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransfersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransfersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovService(uint64(m.Offset))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransfersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransfersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransfersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransfersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransfersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransfersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransfersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &Transfer{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
